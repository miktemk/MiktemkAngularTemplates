{
  "cxzxc": {
    "prefix": "cxzxc",
    "body": [
      "console.log(`$1`);"
    ],
    "description": "Log output to console"
  },
  "cxzxc-debugger": {
    "prefix": "ccc",
    "body": [
      "console.log('debugger;');"
    ],
    "description": "Log debugger; to console"
  },
  "ddd": {
    "prefix": "ddd",
    "body": [
      "debugger;"
    ],
    "description": "debugger;"
  },
  "ddds": {
    "prefix": "ddds",
    "body": [
      "console.log(`DDDDDDDDebug here!!!!!!!!!`);"
    ],
    "description": "console.log(`!!!!!!`);"
  },
  "tttt": {
    "prefix": "tttt",
    "body": [
      "setTimeout(() => {",
      "  $1",
      "}, 1000);"
    ],
    "description": "setTimeout stub"
  },
  "ctor": {
    "prefix": "ctor",
    "body": [
      "constructor() {$1}"
    ],
    "description": "constructor"
  },
  "ngmodel2": {
    "prefix": "ngmodel2",
    "body": [
      "@Input()",
      "$1:$2;",
      "@Output()",
      "$1Change = new EventEmitter<$2>();",
    ],
    "description": "2 way data binding code for ngx component (similar to ngModel)"
  },
  "ngmodel22": {
    "prefix": "ngmodel22",
    "body": [
      "@Output()",
      "$1Change = new EventEmitter<$2>();",
      "@Input()",
      "get $1(): $2 {",
      "  return this._$1;",
      "}",
      "set $1(val: $2) {",
      "  this._$1 = val;",
      "  this.$1Change.emit(this._$1);",
      "}",
      "private _$1:$2;",
    ],
    "description": "2 way data binding code (with backup property) for ngx component (similar to ngModel)"
  },
  "nginput22": {
    "prefix": "nginput22",
    "body": [
      "@Input()",
      "get $1(): $2 {",
      "  return this._$1;",
      "}",
      "set $1(val: $2) {",
      "  this._$1 = val;",
      "}",
      "private _$1:$2;",
    ],
    "description": "@Input with get, set and a backing property"
  },
  "ngpipe": {
    "prefix": "ngpipe",
    "body": [
      "@Pipe({",
      "  name: '$1'",
      "})",
      "export class Pipe_$1 implements PipeTransform {",
      "  transform(value: any): any {",
      "    return value;",
      "  }",
      "}"
    ],
    "description": "starter pipe"
  },
  "import-gtarest": {
    "prefix": "import-gtarest",
    "body": [
      "import * as GTARest from 'core/gen/gta-rest.service';"
    ],
    "description": "import * as GTARest from 'core/gen/gta-rest.service';"
  },
  "import-lodash": {
    "prefix": "import-lodash",
    "body": [
      "import * as _ from 'lodash';"
    ],
    "description": "import * as _ from 'lodash';"
  },
  "import-moment": {
    "prefix": "import-moment",
    "body": [
      "import * as moment from 'moment';"
    ],
    "description": "import * as moment from 'moment';"
  },
  "hgb-dialog-confirm": {
    "prefix": "hgb-dialog-confirm",
    "body": [
      "this.hgbDialogService.openConfirmDialog('Decline', 'Your are about to decline this itinerary. Proceed?').then(dialogResult => {",
      "  if (dialogResult.type != HgbDialogResultType.OK)",
      "    return;",
      "  //...",
      "});"
    ],
    "description": "hgbDialogService.openConfirmDialog..."
  }
  


}