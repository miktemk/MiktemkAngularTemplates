<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Miktemk Define an attached DependencyProperty</Title>
      <Author>Miktemk</Author>
      <Description>(Miktemk Version!) Code snippet for an attached property using DependencyProperty as the backing store</Description>
      <HelpUrl>
      </HelpUrl>
      <Shortcut>propdpaa</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>type</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>int</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>property</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>MyProperty</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this Property.  Typically the class that it is declared in.</ToolTip>
          <Default>ownerclass</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>defaultvalue</ID>
          <ToolTip>The default value for this property.</ToolTip>
          <Default>0</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>controltype</ID>
          <ToolTip>if you care... type of the control.</ToolTip>
          <Default>FrameworkElement</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp" Delimiter="$"><![CDATA[
               
public static $type$ Get$property$(DependencyObject obj) => ($type$)obj.GetValue($property$Property);
public static void Set$property$(DependencyObject obj, $type$ value) => obj.SetValue($property$Property, value);
public static readonly DependencyProperty $property$Property = DependencyProperty.RegisterAttached(
    "$property$", typeof($type$), typeof($ownerclass$), new PropertyMetadata(On$property$Changed));
 
private static void On$property$Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    //var control = d as $controltype$;
    //if (control == null)
    //    return;
    //control.SomeField = Get$property$(d);
}
$end$]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>